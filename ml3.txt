ml practical 3

import numpy as np
import pandas as pd

df = pd.read_csv(r"C:\Users\Abhijit\Downloads\sms+spam+collection\SMSSpamCollection.txt",sep='\t',names=['label','text'])

df

df.shape

import nltk #nltk.download('stopwords')

nltk.download('stopwords')

nltk.download('punkt')

sent = 'Hello friends! How are you? We will learning python today'

from nltk.stem import PorterStemmer
ps = PorterStemmer()
from nltk.corpus import stopwords
swords = stopwords.words('english')
from nltk.tokenize import word_tokenize
word_tokenize(sent)

def clean_text(sent):
 tokens = word_tokenize(sent)
 clean = [word for word in tokens if word.isdigit() or word.isalpha()]
 clean = [ps.stem(word) for word in clean
 if word not in swords]
 return clean

clean_text(sent)

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer(analyzer=clean_text)
x = df['text']
y = df['label']

x_new = tfidf.fit_transform(x)

x.shape

x_new.shape

x_new

import seaborn as sns
sns.countplot(x=y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x_new,y,test_size=0.25,
 random_state=1)

print(f"Size of splitted data")
print(f"x_train {x_train.shape}")
print(f"y_train {y_train.shape}")
print(f"y_test {x_test.shape}")
print(f"y_test {y_test.shape}")

from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()
nb.fit(x_train.toarray(),y_train)
y_pred_nb = nb.predict(x_test.toarray())

y_test.value_counts()

from sklearn.metrics import ConfusionMatrixDisplay, accuracy_score
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt

ConfusionMatrixDisplay.from_predictions(y_test,y_pred_nb)
plt.title('Naive bayes')
plt.show()

print(f" Accuracy is {accuracy_score(y_test,y_pred_nb)}")
print(classification_report(y_test,y_pred_nb))

from sklearn.ensemble import RandomForestClassifier
model_rf = RandomForestClassifier(random_state=1)
model_rf.fit(x_train,y_train)

y_pred_rf = model_rf.predict(x_test) #float

ConfusionMatrixDisplay.from_predictions(y_test,y_pred_rf)
plt.title('Random Forest')
plt.show()
print(f" Accuracy is {accuracy_score(y_test,y_pred_rf)}")
print(classification_report(y_test,y_pred_rf))

from sklearn.model_selection import GridSearchCV

para = {
 'criterion':['gini', 'entropy','log_loss'],
 # 'max_features': ['sqrt','log2'],
 #'random_state': [0,1,2,3,4],
 'class_weight':['balanced','balanced_subsample']
}

grid = GridSearchCV(model_rf, param_grid=para, cv=5, scoring='accuracy')

grid.fit(x_train,y_train)

rf = grid.best_estimator_

y_pred_grid = rf.predict(x_test)

ConfusionMatrixDisplay.from_predictions(y_test,y_pred_grid)
plt.title('Gride Search')
plt.show()
print(f" Accuracy is {accuracy_score(y_test,y_pred_grid)}")
print(classification_report(y_test,y_pred_grid))








